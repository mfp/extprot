
unsetenv(OCAMLFIND_TOOLCHAIN)

OCAMLINCLUDES =
OCAML_LIBS[]  =

CAMLP4PATH = $(shell ocamlfind query camlp4)
PARSERS_PATH = $(CAMLP4PATH)/Camlp4Parsers

OCAMLFLAGS += -syntax camlp4o -I $(PARSERS_PATH)
OCAMLDEPFLAGS += -syntax camlp4o

OCAMLDEP_MODULES_ENABLED = false

OCAMLPACKS[] +=
	camlp4.lib
	camlp4.quotations
	unix

EXTPROT_OBJS[] =
	buffer_pool
	codec
	error
	gencode
	gencode_types
	gen_OCaml
	limits
	msg_buffer
	parser
	protocol_types
	pretty_print
	ptypes
	reader
	lltypes

CAMLP4_OBJS[] =
	Camlp4OCamlRevisedParser
	Camlp4OCamlParser

section
	OCAMLPACKS[] += camlp4.extend
	OCAMLFLAGS += -w e
	CamlSources(parser)

section
	OCAMLFLAGS += -w e
	CamlSources(protocol_types gencode_types)

section
	OCAMLPACKS[] =
		extlib
		camlp4.macro
	CamlSources(msg_buffer reader)

OCamlLibrary(libextprotc, $(addprefix $(PARSERS_PATH)/, $(CAMLP4_OBJS)) $(EXTPROT_OBJS))

OCAML_LIBS[] = libextprotc

OCamlProgram(extprotc, extprotc)

section
	OCAMLFLAGS =
	OCAMLDEPFLAGS =
	OCAMLPACKS[] =
		camlp4.lib
		extlib
		ppxlib
		ppxlib.metaquot
		str
		unix
	CamlSources(ppx_extprot)

section
	OCAMLPACKS[] =
		camlp4.lib
		camlp4.quotations
		extlib
		ppxlib
		ppxlib.metaquot
		str
		unix
	OCAMLFLAGS =
	OCAMLDEPFLAGS =
	OCamlProgram(ppx_extprot, ppx_extprot)

.DEFAULT: extprotc$(EXE)

.PHONY: clean
clean:
	rm -f $(filter-proper-targets $(ls R, .)) *.s *.annot *.cmt *.cmti

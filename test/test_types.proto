
message simple_bool = { v : bool }
message simple_byte = { v : byte }
message simple_int = { v : int }
message simple_long = { v : long }
message simple_float = { v : float }
message simple_string = { v : string }

type tuple 'a 'b = ('a * 'b)
message simple_tuple = { v : tuple<int, bool> }

type digest = string
  options
    "ocaml.type" = "Digest_type.t, Digest_type.from_string, Digest_type.to_string"

message simple_digest = { digest : digest }
message simple_digest2 = { digest : digest; extra : string }

message msg_sum =
    A { b : bool }
  | B { i : int }

type sum_type 'a 'b 'c = A 'a | B 'b | C 'c | D

type sum_type2 'a = A | B 'a | C | D string
  options "ocaml.type_equals" = "Dummy_type.sum"

message simple_sum = { v : sum_type<bool, byte, string> }

message test_constructor_order_kept = { v : sum_type2<int> }

message nested_message = { v : simple_sum; b : int }

message lists_arrays = { lint : [int]; abool : [| bool |] }

message complex_rtt =
  A {
    a1 : [ ( int * [bool] ) ];
    a2 : [ sum_type<int, string, long> ]
    }
| B {
    b1 : bool;
    b2 : (string * [int])
  }

type silly_tuple = ( simple_sum * simple_sum )

message msg1 = { a : int }
message msg1a = A { a : int } | B { b : string }
message msg1b = A { a : int; a' : int } | B { b : string; b' : string }

type int_or_stuff 'a = Int int | Stuff 'a

message msg1c = { a : int_or_stuff<string> }

type color = Red | Black
type node = (int * color * silly_tuple)

message msg1d = { a : node }

type node2 = Node int color silly_tuple
message msg1e = { a : node2 }

message msg2 = { a : int }
message msg2a = { a : int; b : sum_type<bool, byte, int> }
message msg2b = { a : int; b : simple_sum }
message msg2c = { a : int; b : [ int ]; c : [| byte |] }
message msg2c0 = { a : int; b : [ int ] }
message msg2d = { a : int; b : bool }

message msg3 = { v0 : int }
message msg3a = { v0 : int; v1 : silly_tuple; v2 : [ int ] }

type record 'a 'b = { a : 'a; b : 'b }
type irecord 'a = record<int, 'a>

message rec_message = irecord<string>
message rec_message_sum = A irecord<string> | B irecord<int>
message rec_fields = { a : irecord<string>; b : int }

type widen 'a 'b 'c 'd = { a : 'a; b : 'b; c : 'c; d : 'd }

message widen1 = widen< byte, int, long, byte >
message widen2 = widen< int, long, float, long >
message widen3 = widen< long, float, float, float>

message prim_promotion0 = { v : string }
message prim_promotion1 = { v : string; foo : sum_type<int, int, int> }
message prim_promotion2 = { v : prim_promotion1; }

type ocaml_type_poly1 'a = [ (string * 'a) ] options "ocaml.type" = "(string * 'a) list, List.rev, List.rev, []"
message otp1i = { f : ocaml_type_poly1<int> }
message otp1f = { f : ocaml_type_poly1<float> }

type ocaml_type_poly2 'a 'b = [ ('a * 'b) ] options "ocaml.type" = "('a * 'b) array, Array.of_list, Array.to_list, [||]"
type otp2i 'a = { i : ocaml_type_poly2<ocaml_type_poly1<int>,'a>; }
message otp2if = { f : otp2i<float>; }

type ocaml_type_poly3 'a 'b 'c = [ ('a * 'b * 'c) ] options "ocaml.type" = "('a, 'b, 'c) Dummy_type.t2; Dummy_type.id; Dummy_type.id; []"
type otp3i 'a = { i : ocaml_type_poly3<int,'a, int>; }
message otp3if = { f : otp3i<float>; }

type sum_ext1 = A int | B
type sum_ext2 = A int sum_type<int, string, long> bool | B

message se_1 = { x : sum_ext1; y : string; z : sum_ext1; }
message se_2 = { x : sum_ext2; y : string; z : sum_ext2; }

message subset__a    = { a : int; b : bool; c : string; d : long }
message subset__a_1  = {| subset__a | b; d |}
message subset__a_1b = {| subset__a | not a; c |}
message subset__a_2  = {| subset__a | a; c |}
message subset__a_2b = {| subset__a | not b; d |}

type subset__b_0     = { a : int; b : bool; c : string; d : long }
message subset__b    = subset__b_0
message subset__b_1  = {| subset__b | b; d |}
message subset__b_1b = {| subset__b | not a; c |}
message subset__b_2  = {| subset__b | a; c |}
message subset__b_2b = {| subset__b | not b; d |}

type subset__c_0 'a 'b 'c  = { a : 'a; b : 'b; c : 'c; d : long }
message subset__c    = subset__c_0<int, bool, string>
message subset__c_1  = {| subset__c | b; d |}
message subset__c_1b = {| subset__c | not a; c |}
message subset__c_2  = {| subset__c | a; c |}
message subset__c_2b = {| subset__c | not b; d |}

message subset__d    = { a : int; b : bool; c : [int] }
message subset__d_1  = { a : int }
message subset__d_2  = {| subset__d | b; c |}

message subset__e    = { a : int; b : bool; c : [int] }
message subset__e_1  = { a : int }
message subset__e_2  = {| subset__d | a; c |}

type subset__f_0 'a 'b 'c  = { a : 'a; b : 'b; c : 'c; d : string }
message subset__f    = subset__f_0<int, bool, bool>
message subset__f_1  = { a : int }
message subset__f_2  = {| subset__f | c |}

message subset__g    = { a : int; b : bool }
message subset__g1   = {| subset__g | b |}
message subset__g2   = { m1 : subset__g; m2 : subset__g }
message subset__g3   = {| subset__g2 | m2 : subset__g1 |}

type subset__h0 'a 'b 'c = { a : 'a; b : 'b; c : 'c }
message subset__h    = subset__h0<int, bool, string>
message subset__h1   = {| subset__h | c |}
message subset__h2   = subset__h0<subset__h, subset__h, string>
message subset__h3   = {| subset__h2 | b : subset__h1 |}

message subset__i    = { a : string; b : int }
message subset__i1   = {| subset__i | b : float |}

type opt 'a = None | Some 'a options "ocaml.type_equals" = "option"
type opt2 'a = B | A 'a
message subset__j1   = { a : opt2<int>; b : opt2<string> }
message subset__j2   = {| subset__j1 | b : opt<string> |}

type bool_true = bool options "default" = "true"
type int_42    = int options "default" = "42"
type int__43   = int options "default" = "-43"
type byte_44   = byte options "default" = "44"
type long_45   = long options "default" = "45"
type long__46  = long options "default" = "-46"
type float_pi  = float options "default" = "3.14"
type float__pi = float options "default" = "-3.14"

message defv1a = { c : color; }

message defv1b =
  {
    c  : color;
    b  : bool_true;
    i1 : int_42;
    i2 : int__43;
    b2 : byte_44;
    l1 : long_45;
    l2 : long__46;
    f1 : float_pi;
    f2 : float__pi;
  }

message defv1c =
  {
    c  : color;
    b  : bool [@default true];
    i1 : int [@default 42];
    i2 : int [@default -43];
    b2 : byte [@default 44];
    l1 : long [@default 45];
    l2 : long [@default -46];
    f1 : float [@default 3.14];
    f2 : float [@default -3.14]
  }

type pair_int_42__43 = (int_42 * int__43)

message defv2a = { c : color }

message defv2b = { c : color; p : pair_int_42__43 }

message defv2c = { c : color; p : tuple<int_42, int__43> }

message lazy01 = {
  a [@lazy] : bool;
  b [@lazy] : byte;
  c [@lazy] : int;
  d [@lazy] : long;
  e [@lazy] : float;
  f [@lazy] : string
}

message lazy01b = {
  a : bool;
  b : byte;
  c : int;
  d : long;
  e : float;
  f : string
}

type lazyT 'a   = { v [@lazy] : 'a }
type recT 'a    = { v : 'a }
message lazy02  = lazyT<int>
message lazy02b = lazyT< lazyT<int> >
message lazy02c = recT< recT<int> >
message lazy02d = lazyT<bool>
message lazy03  = { v [@lazy] : int; v2 [@lazy] : int [@default 42] }
message lazy03b = { v [@lazy] : int; }
message lazy04  = lazyT< [ int ] >
message lazy05  = lazyT< [| int |] >
message lazy06  = { x : int; v [@lazy] : sum_type2<int> }
message lazy06b = { x : int; v : sum_type2<int> }
message lazy07  = { x : int; v [@lazy] : (int * float) }
message lazy07b = { x : int; v : (int * float) }
message lazy08  = { x : int; v [@lazy] : (simple_bool * simple_bool) }
message lazy08b = { x : int; v [@lazy] : simple_bool }
message lazy09  = { v [@lazy] : simple_bool }
message lazy10  = { x : int; v [@lazy] : simple_bool }
message lazy10b = { x : int; v : simple_bool }
message lazy11  = { v [@lazy] : msg_sum }
message lazy12  = { v [@lazy] : (simple_bool * simple_bool) }
message lazy13  = { v [@lazy] : (msg_sum * msg_sum) }
message lazy14  = { v [@lazy] : [ msg_sum ] }
message lazy15  = A { v [@lazy] : bool } | B { x : int; v [@lazy] : sum_type2<int> }
message lazy15b = A { v : bool } | B { x : int; }

message lazy16  = {
  v1 [@lazy] : simple_bool;
  v2 [@lazy] : (int * string);
  v3 [@lazy] : tuple<string, int>;
  v4 [@lazy] : sum_type<int, int, int>;
  v5 [@lazy] : sum_type<int, string, int>;
  v6 [@lazy] : sum_type<simple_bool, int, int>;
  v7 [@lazy] : [ string ];
  v8 [@lazy] : [ string ];
  v9 [@lazy] : [| int |];
  v0 [@lazy] : [| int |];
}

message lazy16b  = {
  v1 : simple_bool;
  v2 : (int * string);
  v3 : tuple<string, int>;
  v4 : sum_type<int, int, int>;
  v5 : sum_type<int, string, int>;
  v6 : sum_type<simple_bool, int, int>;
  v7 : [ string ];
  v8 : [ string ];
  v9 : [| int |];
  v0 : [| int |];
}

message lazy16c = {| lazy16 | v1; v2; v5; v9; v0 |}
message lazy16d = {| lazy16 | not v0 |}

type string_hohoho = string options "default" = "hohoho"

message lazy17 = {
  v1 [@lazy] : int [@default 789];
  v2 [@lazy] : string_hohoho;
  v3 [@lazy] : sum_type<int, int, int>;
  v4 [@lazy] : [ int ];
  v5 [@lazy] : [| int |];
  v6 [@lazy] : simple_bool;
}

message lazy17b = {
  v1 : int;
  v2 : string_hohoho;
  v3 : sum_type<int, int, int>;
  v4 : [ int ];
  v5 : [| int |];
}

message lazy17c = {
  v1 : int;
  v2 : string_hohoho;
  v3 : sum_type<int, int, int>;
  v4 : [ int ];
}

message lazy17d = {
  v1 : int;
  v2 : string_hohoho;
  v3 : sum_type<int, int, int>;
}

message lazy17e = {
  v1 : int;
  v2 : string_hohoho;
}

message lazy17f = {
  v1 : int;
}

message lazy18  = { v1 [@lazy] : lazy17; v2 [@lazy] : lazy17 }
message lazy18b = { v1 : lazy17f; }

message lazy19  = { x : int; v [@lazy] : lazyT<string_hohoho> }
message lazy19b = { x : int; v: lazyT<string_hohoho> }
message lazy19c = { x : int }

message lazy20a = { v1 : lazyT<string>; v2 : lazyT<simple_bool> }
message lazy20b = { v1 [@lazy] : lazyT<string>; v2 [@lazy] : lazyT<simple_bool> }
message lazy20c = { v1 [@lazy] : lazy20a; v2 [@lazy] : lazy20a }
message lazy20d = {| lazy20c | v2 : lazy20b |}

type lazy21a  = {
  v1 [@lazy] : simple_bool;
  v2 [@lazy] : (int * string);
  v3 [@lazy] : tuple<string, int>;
  v4 [@lazy] : sum_type<int, int, int>;
  v5 [@lazy] : sum_type<int, string, int>;
  v6 [@lazy] : sum_type<simple_bool, int, int>;
  v7 [@lazy] : [ string ];
  v8 [@lazy] : [ string ];
  v9 [@lazy] : [| int |];
  v0 [@lazy] : [| int |];
}

message lazy21b =
    A lazy21a
  | B lazyT<simple_string>

type w0 = bool options "ocaml.type" = "Wrapped_types.Wrap_bool.t; Wrapped_types.Wrap_bool.from_x; Wrapped_types.Wrap_bool.to_x; Wrapped_types.Wrap_bool.from_x true"
type w1 = int options "ocaml.type" = "Wrapped_types.Wrap_int.t, Wrapped_types.Wrap_int.from_x, Wrapped_types.Wrap_int.to_x"
type w2 = byte options "ocaml.type" = "Wrapped_types.Wrap_int.t, Wrapped_types.Wrap_int.from_x, Wrapped_types.Wrap_int.to_x"
type w3 = long options "ocaml.type" = "Wrapped_types.Wrap_i64.t, Wrapped_types.Wrap_i64.from_x, Wrapped_types.Wrap_i64.to_x"
type w4 = float options "ocaml.type" = "Wrapped_types.Wrap_float.t, Wrapped_types.Wrap_float.from_x, Wrapped_types.Wrap_float.to_x"
type w5 = string options "ocaml.type" = "Wrapped_types.Wrap_string.t, Wrapped_types.Wrap_string.from_x, Wrapped_types.Wrap_string.to_x"
type w6 = (int * int * int) options "ocaml.type" = "Wrapped_types.Wrap_tuple_iii.t, Wrapped_types.Wrap_tuple_iii.from_x, Wrapped_types.Wrap_tuple_iii.to_x"
type w7 = (int * string * int) options "ocaml.type" = "Wrapped_types.Wrap_tuple_isi.t, Wrapped_types.Wrap_tuple_isi.from_x, Wrapped_types.Wrap_tuple_isi.to_x"

type wsum_ = A | B string options "ocaml.type_equals" = "Wrapped_types.Sum.t"
type w8 = wsum_ options "ocaml.type" = "Wrapped_types.Wrap_sum.t; Wrapped_types.Wrap_sum.from_x; Wrapped_types.Wrap_sum.to_x; Wrapped_types.Wrap_sum.from_x Wsum_.A"

type wrec_ = { a : int; b : string } options "ocaml.type_equals" = "Wrapped_types.Rec.t"
type w9 = wrec_ options "ocaml.type" = "Wrapped_types.Wrap_rec.t; Wrapped_types.Wrap_rec.from_x; Wrapped_types.Wrap_rec.to_x; failwith \"missing wrec_\""

type w10 = [ int ] options "ocaml.type" = "Wrapped_types.Wrap_list.t, Wrapped_types.Wrap_list.from_x, Wrapped_types.Wrap_list.to_x, Wrapped_types.Wrap_list.from_x [1; 2; 3]"
type w11 = [| int |] options "ocaml.type" = "Wrapped_types.Wrap_array.t, Wrapped_types.Wrap_array.from_x, Wrapped_types.Wrap_array.to_x, Wrapped_types.Wrap_array.from_x [|1; 2; 3|]"

type w12 = A | B w9

message lazy22  = { v [@lazy] : digest }
message lazy22b = { v : digest }
message lazy23_0b = { v : w0 }
message lazy23_0 = { v [@lazy] : w0 }
message lazy23_1 = { v [@lazy] : w1 }
message lazy23_2 = { v [@lazy] : w2 }
message lazy23_3 = { v [@lazy] : w3 }
message lazy23_4 = { v [@lazy] : w4 }
message lazy23_5 = { v [@lazy] : w5 }
message lazy23_6 = { v [@lazy] : w6 }
message lazy23_7 = { v [@lazy] : w7 }
message lazy23_8 = { v [@lazy] : w8 }
message lazy23_9 = { v [@lazy] : w9 }
message lazy23_10 = { v [@lazy] : w10 }
message lazy23_11 = { v [@lazy] : [w9] }
message lazy23_12 = { v [@lazy] : [w10] }
message lazy23_13 = { v [@lazy] : w11 }
message lazy23_14 = { v [@lazy] : [|w9|] }
message lazy23_15 = { v [@lazy] : [|w10|] }
message lazy23_16 = { v [@lazy] : (w0 * bool) }
message lazy23_17 = { v [@lazy] : w12 }

message lazy24 = {
  v1 : int [@default 789];
  v2 : string_hohoho;
  v3 : sum_type<int, int, int>;
  v4 : [ int ];
  v5 : [| int |];
  v6 : simple_bool;
}

message lazy24a = {| lazy24 | v1 [@lazy]; v2 [@lazy]; v3 [@lazy] |}
message lazy24b = {| lazy24 | v4 [@lazy]; v5 [@lazy]; v6 [@lazy] |}
message lazy24c = {| lazy24 | v1 [@lazy]; v2; v3 [@lazy] |}

message lazy25 = {| lazy17 | v1 [@eager]; v3; v4 |}

message autolazy1 [@autolazy] =
  {
    v1 : int;
    v2 : lazy24;
  }

message autolazy1b [@autolazy] =
  {
    v1 : int;
    v2 [@eager]: lazy24;
    v3 : lazy24;
    v4 [@lazy] : int;
  }

message autolazy2 [@autolazy] =
    A { v1 : int; v2 : lazy24; }
  | B { v1 : float; v2 : lazy24 }

message autolazy2b [@autolazy] =
    A { v1 : int; v2 : lazy24; v3 [@eager] : lazy24; v4 [@lazy] : int }
  | B { v1 : float; v2 : lazy24; v3 [@eager] : lazy24; v4 [@lazy] : int }

message nameclash = {
  a : int;
  s : int;
  b : int;
}

(* vim:set ft=ocaml: *)
